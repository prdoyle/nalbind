package org.elasticsearch.nalbind.injector;

import java.lang.invoke.MutableCallSite;
import java.util.concurrent.atomic.AtomicBoolean;

import static java.lang.invoke.MethodHandles.constant;

/**
 * Actual instances of this will be generated by ASM so they can use invokedynamic
 * for maximum performance.
 */
public abstract class MutableLater<T> implements Later<T> {
	private final AtomicBoolean alreadySet = new AtomicBoolean(false);
	protected final MutableCallSite callSite;

	protected MutableLater(MutableCallSite callSite) {
		this.callSite = callSite;
	}

	@Override
	public void setValue(T newValue) {
		if (alreadySet.getAndSet(true)) {
			throw new IllegalStateException("Already set!");
		} else {
			callSite.setTarget(constant(newValue.getClass(), newValue));
		}
	}
}
